;(deftype Buffer
;  (struct Integer rem
;          Integer size
;          String data))
;
;(deftype Stream
;  (struct File source
;          Integer next))

(: buf_create (-> buffer_t int))
(defun (buf_create size)
  (def buffer_t buf)
  (set buf.rem (- size 1))
  (set buf.size size)
  (set buf.data (malloc (* buf.size (sizeof char))))
  (set buf.data[0] '\0')
  buf)

(: buf_grow (-> void buffer_t*))
(defun (buf_grow buf)
  (set buf->rem (+ buf->rem buf->size))
  (def char* data (malloc (* buf->size (* 2 (sizeof char)))))
  (memcpy data buf->data buf->size)
  (free buf->data)
  (set buf->size (* 2 buf->size))
  (set buf->data data)
  void)

(: buf_write (-> void buffer_t* char*))
(defun (buf_write buf str)
  (def int len (strlen str))
  (if (gt len buf->rem)
    (progn
      (buf_grow buf)
      (buf_write buf str))
    (progn
      (strncat buf->data str (- buf->rem 1))
      (set buf->rem (- buf->rem len))))
  void)

(: buf_write_char (-> void buffer_t* char))
(defun (buf_write_char buf c)
  (if (lte buf->rem 0)
    (buf_grow buf))
  (set buf->data[buf->size-1-buf->rem--] c)
  (set buf->data[buf->size-1-buf->rem] '\0')
  void)

(: stream_peek (-> int stream_t*))
(defun (stream_peek stream)
  (if (ne stream->next -2)
    (return stream->next)
    (progn
      (def int c (fgetc stream->source))
      (set stream->next c)
      (return c)))
  void)

(: stream_read (-> int stream_t*))
(defun (stream_read stream)
  (if (ne stream->next -2)
    (progn
      (def int c stream->next)
      (set stream->next -2)
      (return c))
    (return (fgetc stream->source)))
  void)

(: read_until (-> void stream_t* buffer_t* int))
(defun (read_until stream buf d)
  (while 1
    (def int c (stream_peek stream))
    (if (or (eq c EOF) (eq c d))
      (break))
    (if (eq c '\\')
      (buf_write_char buf (char (stream_read stream))))
    (buf_write_char buf (char (stream_read stream))))
  void)

(: read_empty (-> int stream_t*))
(defun (read_empty stream)
  (def int c)
  (while 1
    (set c (stream_peek stream))
    (if (eq c EOF)
      (return EOF))
    (if (or (eq c ' ') (eq c '\n'))
      (stream_read stream)
      (return c)))
  void)

(: read_comment (-> void stream_t*))
(defun (read_comment stream)
  (def buffer_t buf (buf_create 64))
  (stream_read stream) ; ';'
  (read_until stream &buf '\n')
  (stream_read stream) ; '\n'
  void)

(: read_atom (-> int stream_t* atom_t*))
(defun (read_atom stream atom)
  (def buffer_t str)
  (def int c (stream_peek stream))
  (case c
    ('\''
      (set atom->type ATOM_CHAR)
      (set str (buf_create 16))
      (stream_read stream)
      (read_until stream &str c)
      (stream_read stream))
    ('"'
      (set atom->type ATOM_STRING)
      (set str (buf_create 16))
      (stream_read stream)
      (read_until stream &str c)
      (stream_read stream))
    (else
      (set atom->type ATOM_IDENTIFIER)
      (set str (buf_create 16))
      (while 1
        (def int d (stream_peek stream))
        (if (or (or (eq d ' ') (eq d '\n')) (eq d ')'))
          (break)) ; fixme
        (buf_write_char &str (char (stream_read stream))))))
  (set atom->name str.data)
  0)

(: read_list (-> int stream_t* list_t*))
(defun (read_list stream list)
  (def int c (stream_read stream))
  (if (ne c '(')
    (progn
      (fprintf stderr "expected list, got %c\n" c)
      (return 1)))
  (def node_t* node)
  (def node_t* prev)
  (while 1
    (set c (stream_peek stream))
    ; TODO: replace with case
    (if (or (or (eq c EOF) (eq c -2)) (eq c ')'))
      (progn
        (stream_read stream)
        (break))
      (if (eq c ' ')
        (stream_read stream)
        (progn
          (set node (malloc (sizeof node_t)))
          (set node->next NULL)
          (read_node stream node)
          (if (eq list->len 0)
            (set list->fst node)
            (set prev->next node))
          (set prev node)
          (set list->len (+ list->len 1))))))
  0)

(: read_node (-> int stream_t* node_t*))
(defun (read_node stream node)
  (read_empty stream)
  (def int c (stream_peek stream))
  (if (eq c EOF)
    (progn
      (fprintf stderr "unexpected eof\n")
      (return 1)))
  (case c
    (';'
      (read_comment stream)
      (return (read_node stream node)))
    ('('
      (set node->type NODE_LIST)
      (set node->list (malloc (sizeof list_t)))
      (set node->list->len 0)
      (return (read_list stream node->list)))
    (else
      (set node->type NODE_ATOM)
      (set node->atom (malloc (sizeof atom_t)))
      (return (read_atom stream node->atom))))
  0)

(: print_node (-> void node_t* int))
(defun (print_node node depth)
  (if (eq node->type NODE_ATOM)
    (printf "%*s atom: %s\n" depth "" node->atom->name)
    (if (eq node->type NODE_LIST)
      (progn
        (printf "%*s list: %d\n" depth "" node->list->len)
        (print_node node->list->fst (+ depth INDENTATION)))))
  (if (ne node->next NULL)
    (print_node node->next depth))
  void)
